apiVersion: v1
kind: Namespace
metadata:
  name: idp
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: idp
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log;

    events {
        worker_connections 1024;
    }

    http {
      server {
          listen 80;
          server_name localhost;

          location /adminer {
              proxy_pass http://adminer-service:8080;
          }

          location ^~ /api/v1/auth {
              proxy_pass http://auth-service:10001;
          }
          location ^~ /api/v1/users {
              proxy_pass http://auth-service:10001;
          }

          location ^~ /api/v1/admin {
              proxy_pass http://business-logic-service:8080;
          }
          location ^~ /api/v1/manager {
              proxy_pass http://business-logic-service:8080;
          }
          location ^~ /api/v1/store {
              proxy_pass http://business-logic-service:8080;
          }
          location = /portainer {
              proxy_set_header Host $http_host;
              return 302 /portainer/;
          }
          location /portainer/ {
              proxy_set_header Host $http_host;
              proxy_pass http://portainer:9000/;
          }
        }
      }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: idp
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 1
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.25.5
        ports:
        - name: nginx-port
          containerPort: 80
        volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
            - key: nginx.conf
              path: nginx.conf
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer-deployment
  namespace: idp
  labels:
    app: adminer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
      - name: adminer-container
        image: adminer:4.8.1
        ports:
        - name: adminer-port
          containerPort: 8080
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-deployment
  namespace: idp
spec:
  selector:
    matchLabels:
      app: auth
  replicas: 1
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
      - name: auth
        image: 2001slavic/idp-proiect-auth-service:latest
        imagePullPolicy: Always
        env:
        - name: IO_SERVICE_URL
          value: http://io-service:10000
        - name: AUTH_SERVICE_PORT
          value: "10001"
        - name: IO_SERVICE_USERS_ENDPOINT
          value: /api/v1/users
        - name: IO_SERVICE_USERS_FIND_BY_EMAIL
          value: /email
        - name: IO_SERVICE_USERS_REGISTER
          value: /register
        - name: IO_SERVICE_USERS_VALIDATE_LOGIN
          value: /validate-login
        - name: IO_SERVICE_TOKENS_ENDPOINT
          value: /api/v1/tokens
        - name: IO_SERVICE_TOKENS_LOGOUT
          value: /logout
        - name: IO_SERVICE_TOKENS_REVOKE
          value: /revoke
        - name: IO_SERVICE_TOKENS_IS_REFRESH
          value: /is-refresh
        ports:
        - name: auth-port
          containerPort: 10001

      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: business-logic-deployment
  namespace: idp
spec:
  selector:
    matchLabels:
      app: business-logic
  replicas: 1
  template:
    metadata:
      labels:
        app: business-logic
    spec:
      containers:
      - name: business-logic
        image: 2001slavic/idp-proiect-business-logic:latest
        imagePullPolicy: Always
        env:
        - name: IO_SERVICE_URL
          value: http://io-service:10000
        - name: AUTH_SERVICE_URL
          value: http://auth-service:10001
        - name: BUSINESS_LOGIC_SERVICE_PORT
          value: "8080"
        - name: IO_SERVICE_USERS_ENDPOINT
          value: /api/v1/users
        - name: IO_SERVICE_USERS_FIND_BY_EMAIL
          value: /email
        - name: IO_SERVICE_USERS_MANAGER
          value: /manager
        - name: IO_SERVICE_PRODUCTS_ENDPOINT
          value: /api/v1/products
        - name: IO_SERVICE_CATEGORIES_ENDPOINT
          value: /api/v1/categories
        - name: IO_SERVICE_ORDERS_ENDPOINT
          value: /api/v1/orders
        - name: AUTH_SERVICE_USERS_ME_ENDPOINT
          value: /api/v1/users/me
        ports:
        - name: business-port
          containerPort: 8080

      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: idp
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
  - port: 30000
    targetPort: nginx-port
    nodePort: 30000
---
apiVersion: v1
kind: Service
metadata:
  name: adminer-service
  namespace: idp
spec:
  type: ClusterIP
  selector:
    app: adminer
  ports:
    - port: 8080
      targetPort: adminer-port
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: idp
spec:
  type: ClusterIP
  selector:
    app: auth
  ports:
    - port: 10001
      targetPort: auth-port
---
apiVersion: v1
kind: Service
metadata:
  name: business-logic-service
  namespace: idp
spec:
  type: ClusterIP
  selector:
    app: business-logic
  ports:
    - port: 8080
      targetPort: business-port
---
# Source: portainer/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: portainer-sa-clusteradmin
  namespace: idp
  labels:
    app.kubernetes.io/name: portainer
    app.kubernetes.io/instance: portainer
    app.kubernetes.io/version: "ce-latest-ee-2.19.4"
---
# Source: portainer/templates/pvc.yaml
kind: "PersistentVolumeClaim"
apiVersion: "v1"
metadata:
  name: portainer
  namespace: idp  
  annotations:
    volume.alpha.kubernetes.io/storage-class: "generic"
  labels:
    io.portainer.kubernetes.application.stack: portainer
    app.kubernetes.io/name: portainer
    app.kubernetes.io/instance: portainer
    app.kubernetes.io/version: "ce-latest-ee-2.19.4"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: portainer/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: idp
  labels:
    app.kubernetes.io/name: portainer
    app.kubernetes.io/instance: portainer
    app.kubernetes.io/version: "ce-latest-ee-2.19.4"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  namespace: idp
  name: portainer-sa-clusteradmin
---
# Source: portainer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: portainer
  namespace: idp
  labels:
    io.portainer.kubernetes.application.stack: portainer
    app.kubernetes.io/name: portainer
    app.kubernetes.io/instance: portainer
    app.kubernetes.io/version: "ce-latest-ee-2.19.4"
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: http
    - port: 9443
      targetPort: 9443
      protocol: TCP
      name: https
    - port: 30776
      targetPort: 30776
      protocol: TCP
      name: edge
  selector:
    app.kubernetes.io/name: portainer
    app.kubernetes.io/instance: portainer
---
# Source: portainer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: portainer
  namespace: idp
  labels:
    io.portainer.kubernetes.application.stack: portainer
    app.kubernetes.io/name: portainer
    app.kubernetes.io/instance: portainer
    app.kubernetes.io/version: "ce-latest-ee-2.19.4"
spec:
  replicas: 1
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
      app.kubernetes.io/name: portainer
      app.kubernetes.io/instance: portainer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: portainer
        app.kubernetes.io/instance: portainer
    spec:
      nodeSelector:
        {}
      serviceAccountName: portainer-sa-clusteradmin
      volumes:
        - name: "data"
          persistentVolumeClaim:
            claimName: portainer
      containers:
        - name: portainer
          image: "portainer/portainer-ce:2.19.4"
          imagePullPolicy: Always
          args:
          - '--tunnel-port=30776'          
          volumeMounts:
            - name: data
              mountPath: /data              
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
            - name: https
              containerPort: 9443
              protocol: TCP              
            - name: tcp-edge
              containerPort: 8000
              protocol: TCP              
          livenessProbe:
            httpGet:
              path: /
              port: 9443
              scheme: HTTPS
          readinessProbe:
            httpGet:
              path: /
              port: 9443
              scheme: HTTPS
          resources:
            {}